 /*----------------------------------------------------------------------------
Adds a package of general use functions to a data set of compiled SAS routines.

Output
    Work.Functions.Utility
        Package of compiled custom SAS routines.

Additonal notes
    The compiled function data set will ultimately be copied to a directory
    where all DHI staff have access.
 ----------------------------------------------------------------------------*/


PROC FCMP outlib = Work.Functions.Utility;
    /*------------------------------------------------------------------------
    Capitalize the first word of a character value.

    Arguments
        charvar
            Character variable

    Return
        The value of charvar where the first character of the first word is
        capitalized
    */
    Subroutine capitalize_first(charvar $);
        Outargs charvar;
        first_word = scan(charvar, 1);
        first_letter = substr(first_word, 1, 1);
        first_letter_position = find(charvar, first_letter);
        substr(charvar, first_letter_position, 1) = upcase(first_letter);
    Endsub;

    /*------------------------------------------------------------------------
    Extend a character variable's value to that variable's length by adding
    padding characters to the beginning.

    Arguments
        charvar
            Character variable to be extended
        pad_character
            Character value of length 1 to use as padding

    Return
        The value of charvar will be changed to be length lengthm(charvar), with
        the necessary number of pad_character added to the beginning to make it
        this length. Missing values are preserved.

    Example
        DATA test;
            Length county_fips $ 3;
            Do county_fips = '3', '23', '123';
                unpadded_value = county_fips;
                Call pad_beginning(county_fips, '0');
                Put "Old:" unpadded_value $3. " New:" county_fips;
            End;
        Run;
        *Old: 3   New: 003;
        *Old: 23  New: 023;
        *Old: 123 New: 123;
    */
    Subroutine pad_beginning(charvar $, pad_character $);
        Outargs charvar;
        pad_single_character = substr(pad_character, 1, 1);
        stripped_length = lengthn(strip(charvar));
        If not missing(charvar) and stripped_length < lengthm(charvar) then do;
            padding_length = lengthm(charvar) - stripped_length;
            padding = repeat(pad_single_character, padding_length - 1);
            charvar = substr(padding, 1, padding_length) || strip(charvar);
        End;
    Endsub;

    /*------------------------------------------------------------------------
    Choose a random number from a sequence.

    Required arguments
        low
            (numeric) Lower closed bound of possible return values
        high
            (numeric) Upper open bound of possible return values
        step
            (numeric) Increment between the possible values

    Details
        Retuns a random number from the sequence generated by
        `low` + i * `step`, where i = 0, 1, 2, ..., k, and
        `low` + k * `step` <= `high`.

    Examples
        *** Integer between 1 and 100 ***;
        randsequence(1, 100, 1)
        *** Integer between 18 and 75 ***;
        randsequence(18, 75, 1)
        *** Odd number under 100 (1, 3, 5, ..., or 99) ***;
        randsequence(1, 99, 2)
        *** Number between 4.3 and 16, by 0.5 (4.3, 4.8, ..., 15.8) ***;
        randsequence(4.3, 16, 0.5)
    */
    Function randsequence(low, high, step);
        step_range = floor((high - low) / step) + 1;
        step_count = floor(rand('UNIFORM') * step_range);
        return(low + step * step_count);
    Endsub;

    /*------------------------------------------------------------------------
    Extract the base file name from a file path.

    Arguments
        filepath
            (character value) Physical file location
    Return
        (character) The name of the file given by filepath.
    */
    Function basename(filepath $) $ 260;
        Length norm_path $ 260;
        norm_path = tranwrd(filepath, '\', '/');
        file_pieces = countw(norm_path, '/');
        base_name = scan(norm_path, file_pieces, '/');
        Return(strip(base_name));
    Endsub;

    /*------------------------------------------------------------------------
    Extract the directory path from a file path.

    Arguments
        filepath
            (character value) Physical file location
    Return
        (character) The physical location of the directory containing filepath.
    */
    Function dirname(filepath $) $ 260;
        Length filepath_ $ 260;
        filepath_ = strip(filepath);
        base_name = basename(filepath_);
        path_length = lengthn(filepath_);
        base_length = lengthn(base_name);
        dir_name = substr(filepath_, 1,  path_length - base_length - 1);
        Return(strip(dir_name));
    Endsub;
Run;
